/* The following code was generated by JFlex 1.4.3 on 5/9/15 5:22 PM */

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.EnumMap;
import java.util.Set;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 5/9/15 5:22 PM from the specification file
 * <tt>reglas.flex</tt>
 */
class AnalizadorL {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\2\1\0\1\0\1\4\22\0\1\11\1\53\1\41\4\0"+
    "\1\37\1\14\1\45\1\3\1\42\1\44\1\42\1\43\1\1\12\40"+
    "\1\0\1\50\1\52\1\51\1\52\2\0\22\35\1\21\7\35\1\46"+
    "\1\0\1\47\1\0\1\36\1\0\1\32\1\30\1\34\1\33\1\6"+
    "\1\13\1\31\1\20\1\12\2\35\1\7\1\24\1\27\1\15\1\26"+
    "\1\35\1\16\1\10\1\23\1\25\1\35\1\17\1\35\1\22\1\35"+
    "\1\5\11\0\1\0\u1fa2\0\1\0\1\0\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\3\1\1\2\13\3\1\1\1\4\4\1\1\0"+
    "\1\3\5\0\15\3\3\0\1\4\1\0\1\4\1\0"+
    "\1\3\17\0\1\5\1\4\1\0\1\4\3\0\2\3"+
    "\1\0\1\6\1\7\11\3\1\4\1\0\1\3\1\10"+
    "\13\0\1\4\1\6\2\0\1\11\4\3\1\0\1\12"+
    "\1\0\1\3\16\0\1\10\1\4\1\0\1\11\2\3"+
    "\1\0\1\3\7\0\2\3\1\0\1\12\4\0\1\3"+
    "\17\0\1\13\1\0\1\3\1\0\1\4\12\0\1\3"+
    "\1\0\1\4\12\0\1\3\1\0\1\4\5\0\1\3"+
    "\13\0\1\10\1\4\4\0\1\3\1\0\1\4\4\0"+
    "\1\3\1\0\1\4\2\0\1\3\1\0\1\4\2\0"+
    "\1\3\1\0\1\4\2\0\1\3\1\0\1\4\2\0"+
    "\1\14\1\3\1\14\1\0\1\4\1\0\1\14\1\0"+
    "\1\3\1\0\1\4\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[260];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\54\0\260\0\334\0\u0108"+
    "\0\u0134\0\u0160\0\u018c\0\u01b8\0\u01e4\0\u0210\0\u023c\0\u0268"+
    "\0\u0294\0\u02c0\0\u02ec\0\u02c0\0\u0318\0\u0344\0\u0370\0\u039c"+
    "\0\u03c8\0\u03f4\0\u0420\0\u044c\0\u0478\0\u04a4\0\u04d0\0\u04fc"+
    "\0\u0528\0\u0554\0\u0580\0\u05ac\0\u05d8\0\u0604\0\u0630\0\u065c"+
    "\0\u0688\0\u06b4\0\u06e0\0\u070c\0\u02ec\0\u02ec\0\u0738\0\u070c"+
    "\0\u0764\0\u0790\0\u07bc\0\u07e8\0\u0814\0\u0840\0\u086c\0\u0898"+
    "\0\u08c4\0\u08f0\0\u091c\0\u0948\0\u0974\0\u09a0\0\u09cc\0\u09f8"+
    "\0\u0a24\0\54\0\u0a50\0\u0a7c\0\u0aa8\0\u0294\0\u02c0\0\u0ad4"+
    "\0\u0b00\0\u0b2c\0\u0b58\0\u03f4\0\u0b84\0\u0bb0\0\u0bdc\0\u0c08"+
    "\0\u0c34\0\u0c60\0\u0c8c\0\u0cb8\0\u0ce4\0\u0d10\0\54\0\u0d3c"+
    "\0\u0d68\0\54\0\u0d94\0\u0dc0\0\u0dec\0\u0e18\0\u0e44\0\u0e70"+
    "\0\u0e9c\0\u0ec8\0\u0ef4\0\u0f20\0\u0f4c\0\u0f78\0\54\0\u0fa4"+
    "\0\u0fd0\0\u03f4\0\u0ffc\0\u1028\0\u1054\0\u1080\0\u10ac\0\54"+
    "\0\u10d8\0\u1104\0\u1130\0\u115c\0\u1188\0\u11b4\0\u11e0\0\u120c"+
    "\0\u1238\0\u1264\0\u1290\0\u12bc\0\u12e8\0\u1314\0\u1340\0\u136c"+
    "\0\u09a0\0\u1398\0\u13c4\0\54\0\u13f0\0\u141c\0\u1448\0\u1474"+
    "\0\u14a0\0\u14cc\0\u14f8\0\u1524\0\u1550\0\u157c\0\u15a8\0\u15d4"+
    "\0\u1600\0\u162c\0\u03f4\0\u1658\0\u1684\0\u16b0\0\u16dc\0\u1708"+
    "\0\u1734\0\u1760\0\u178c\0\u17b8\0\u17e4\0\u1810\0\u183c\0\u1868"+
    "\0\u1894\0\u18c0\0\u18ec\0\u1918\0\u1944\0\u1970\0\u199c\0\54"+
    "\0\u19c8\0\u19f4\0\u1a20\0\u1a4c\0\u1a78\0\u1aa4\0\u1ad0\0\u1afc"+
    "\0\u1b28\0\u1b54\0\u1b80\0\u1bac\0\u1bd8\0\u1c04\0\u1c30\0\u1c5c"+
    "\0\u1c88\0\u1cb4\0\u1ce0\0\u1d0c\0\u1d38\0\u1d64\0\u1d90\0\u1dbc"+
    "\0\u1de8\0\u1e14\0\u1e40\0\u1e6c\0\u1e98\0\u1ec4\0\u1ef0\0\u1f1c"+
    "\0\u1f48\0\u1f74\0\u1fa0\0\u1fcc\0\u1ff8\0\u2024\0\u2050\0\u207c"+
    "\0\u20a8\0\u20d4\0\u2100\0\u212c\0\u2158\0\u2184\0\u21b0\0\u1fa0"+
    "\0\u21dc\0\u2208\0\u2234\0\u2260\0\u228c\0\u22b8\0\u22e4\0\u2310"+
    "\0\u233c\0\u2368\0\u2394\0\u23c0\0\u23ec\0\u2418\0\u2444\0\u2470"+
    "\0\u249c\0\u24c8\0\u24f4\0\u2520\0\u254c\0\u2578\0\u25a4\0\u25d0"+
    "\0\u25fc\0\u2628\0\u2654\0\u2680\0\u26ac\0\u26d8\0\u2704\0\u2730"+
    "\0\54\0\u275c\0\u03f4\0\u2788\0\u27b4\0\u27e0\0\u09a0\0\u280c"+
    "\0\u2838\0\u2864\0\u2890\0\u28bc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[260];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\2\1\4\1\5\1\6\1\7\1\10"+
    "\1\2\1\11\1\12\1\2\2\13\1\14\1\13\1\15"+
    "\6\13\1\16\2\13\1\17\1\20\1\13\1\2\1\21"+
    "\1\22\1\23\1\24\1\25\10\2\55\0\1\26\1\0"+
    "\1\27\52\0\1\2\57\0\1\13\1\30\1\13\1\31"+
    "\2\13\1\32\22\13\1\0\1\13\10\0\1\33\1\34"+
    "\1\35\6\0\3\13\1\31\2\13\1\32\1\36\21\13"+
    "\1\0\1\13\10\0\1\33\1\34\1\35\6\0\3\13"+
    "\1\31\2\13\1\32\3\13\1\37\16\13\1\0\1\13"+
    "\10\0\1\33\1\34\1\35\6\0\3\13\1\31\1\13"+
    "\1\40\1\32\12\13\1\41\7\13\1\0\1\13\10\0"+
    "\1\33\1\34\1\35\6\0\1\13\1\42\1\13\1\31"+
    "\2\13\1\32\1\43\21\13\1\0\1\13\10\0\1\33"+
    "\1\34\1\35\6\0\3\13\1\31\2\13\1\32\22\13"+
    "\1\0\1\13\10\0\1\33\1\34\1\35\6\0\3\13"+
    "\1\31\2\13\1\32\3\13\1\44\16\13\1\0\1\13"+
    "\10\0\1\33\1\34\1\35\6\0\3\13\1\31\2\13"+
    "\1\32\5\13\1\45\1\46\13\13\1\0\1\13\10\0"+
    "\1\33\1\34\1\35\6\0\3\13\1\31\2\13\1\32"+
    "\1\47\4\13\1\50\14\13\1\0\1\13\10\0\1\33"+
    "\1\34\1\35\6\0\3\13\1\31\2\13\1\32\1\51"+
    "\21\13\1\0\1\13\10\0\1\33\1\34\1\35\6\0"+
    "\3\13\1\31\2\13\1\32\3\13\1\52\16\13\1\0"+
    "\1\13\10\0\1\33\1\34\1\35\6\0\3\53\1\0"+
    "\2\53\1\0\21\53\2\0\1\53\53\0\1\22\2\0"+
    "\1\54\10\0\2\55\1\0\36\55\1\56\12\55\6\0"+
    "\3\57\1\0\2\57\1\0\21\57\2\0\1\60\13\0"+
    "\2\26\1\0\51\26\3\27\1\61\50\27\6\0\2\13"+
    "\1\62\1\31\2\13\1\32\22\13\1\0\1\13\10\0"+
    "\1\33\1\34\1\35\11\0\1\31\37\0\1\33\1\34"+
    "\1\35\6\0\1\63\1\64\1\65\1\32\1\66\1\67"+
    "\1\0\4\63\1\70\6\63\1\71\2\63\1\72\1\73"+
    "\1\63\1\0\1\74\1\75\1\76\1\77\1\100\1\101"+
    "\1\102\14\0\3\103\1\104\2\103\1\0\12\103\1\105"+
    "\6\103\1\0\1\106\1\22\1\55\1\107\1\54\5\0"+
    "\1\110\10\0\3\103\1\110\2\103\1\0\21\103\1\0"+
    "\1\106\1\22\1\55\1\107\1\54\5\0\1\110\53\0"+
    "\1\110\10\0\3\13\1\31\2\13\1\32\12\13\1\111"+
    "\7\13\1\0\1\13\10\0\1\33\1\34\1\35\6\0"+
    "\3\13\1\31\2\13\1\32\1\112\21\13\1\0\1\13"+
    "\10\0\1\33\1\34\1\35\6\0\3\13\1\113\2\13"+
    "\1\114\22\13\1\0\1\13\10\0\1\33\1\34\1\35"+
    "\6\0\3\13\1\31\2\13\1\32\6\13\1\115\13\13"+
    "\1\0\1\13\10\0\1\33\1\34\1\35\6\0\3\13"+
    "\1\31\2\13\1\32\1\116\21\13\1\0\1\13\10\0"+
    "\1\33\1\34\1\35\6\0\3\13\1\31\2\13\1\32"+
    "\1\13\1\117\20\13\1\0\1\13\10\0\1\33\1\34"+
    "\1\35\6\0\3\13\1\31\1\120\1\13\1\32\22\13"+
    "\1\0\1\13\10\0\1\33\1\34\1\35\6\0\2\13"+
    "\1\121\1\31\2\13\1\32\22\13\1\0\1\13\10\0"+
    "\1\33\1\34\1\35\6\0\3\13\1\31\2\13\1\32"+
    "\1\13\1\122\20\13\1\0\1\13\10\0\1\33\1\34"+
    "\1\35\6\0\3\13\1\31\2\13\1\32\1\123\21\13"+
    "\1\0\1\13\10\0\1\33\1\34\1\35\6\0\3\13"+
    "\1\31\2\13\1\32\6\13\1\124\13\13\1\0\1\13"+
    "\10\0\1\33\1\34\1\35\6\0\3\13\1\31\2\13"+
    "\1\32\10\13\1\125\11\13\1\0\1\13\10\0\1\33"+
    "\1\34\1\35\6\0\3\13\1\31\2\13\1\32\15\13"+
    "\1\126\4\13\1\0\1\13\10\0\1\33\1\34\1\35"+
    "\37\0\1\127\54\0\1\60\21\0\3\57\1\0\2\57"+
    "\1\130\22\57\1\0\1\57\13\0\1\27\1\2\1\27"+
    "\1\61\50\27\6\0\1\131\2\13\1\31\2\13\1\32"+
    "\22\13\1\0\1\13\10\0\1\33\1\34\1\35\6\0"+
    "\3\63\1\130\2\63\1\0\22\63\1\74\1\63\1\76"+
    "\1\77\1\100\1\130\1\132\14\0\3\63\1\130\2\63"+
    "\1\0\1\133\21\63\1\74\1\63\1\76\1\77\1\100"+
    "\1\130\1\132\14\0\3\63\1\130\2\63\1\0\3\63"+
    "\1\134\16\63\1\74\1\63\1\76\1\77\1\100\1\130"+
    "\1\132\14\0\3\63\1\130\2\63\1\0\12\63\1\135"+
    "\7\63\1\74\1\63\1\76\1\77\1\100\1\130\1\132"+
    "\14\0\1\63\1\136\1\63\1\130\2\63\1\0\22\63"+
    "\1\74\1\63\1\76\1\77\1\100\1\130\1\132\14\0"+
    "\3\63\1\130\2\63\1\0\6\63\1\137\13\63\1\74"+
    "\1\63\1\76\1\77\1\100\1\130\1\132\14\0\3\63"+
    "\1\130\2\63\1\0\1\140\4\63\1\141\14\63\1\74"+
    "\1\63\1\76\1\77\1\100\1\130\1\132\14\0\3\63"+
    "\1\130\2\63\1\0\1\142\21\63\1\74\1\63\1\76"+
    "\1\77\1\100\1\130\1\132\14\0\3\63\1\130\2\63"+
    "\1\0\3\63\1\143\16\63\1\74\1\63\1\76\1\77"+
    "\1\100\1\130\1\132\14\0\3\144\1\0\2\144\1\0"+
    "\21\144\2\0\1\144\21\0\3\63\1\130\2\63\1\0"+
    "\21\63\1\0\1\74\1\75\1\76\1\77\1\100\1\130"+
    "\1\132\6\0\2\76\1\0\36\76\1\145\12\76\40\0"+
    "\1\75\2\0\1\100\50\0\1\75\24\0\1\32\50\0"+
    "\3\103\1\0\2\103\1\0\22\103\1\0\1\103\21\0"+
    "\3\103\1\104\2\103\1\0\12\103\1\105\6\103\1\0"+
    "\1\106\1\22\1\55\1\107\1\54\16\0\1\146\2\103"+
    "\1\0\2\103\1\0\22\103\1\0\1\103\21\0\3\103"+
    "\1\110\2\103\1\0\21\103\1\0\1\106\1\22\1\55"+
    "\1\107\1\54\16\0\3\13\1\31\2\13\1\32\14\13"+
    "\1\115\5\13\1\0\1\13\10\0\1\33\1\34\1\35"+
    "\6\0\3\13\1\31\2\13\1\32\1\13\1\41\20\13"+
    "\1\0\1\13\10\0\1\33\1\34\1\35\11\0\1\113"+
    "\2\0\1\147\34\0\1\33\1\34\1\35\6\0\3\13"+
    "\1\31\2\13\1\32\22\13\1\0\1\13\5\0\1\150"+
    "\2\0\1\33\1\34\1\35\6\0\3\13\1\31\2\13"+
    "\1\32\15\13\1\41\4\13\1\0\1\13\10\0\1\33"+
    "\1\34\1\35\6\0\3\13\1\151\2\13\1\152\22\13"+
    "\1\0\1\13\10\0\1\33\1\34\1\35\6\0\1\13"+
    "\1\153\1\13\1\31\2\13\1\32\22\13\1\0\1\13"+
    "\10\0\1\33\1\34\1\35\6\0\3\13\1\31\2\13"+
    "\1\32\6\13\1\154\13\13\1\0\1\13\10\0\1\33"+
    "\1\34\1\35\6\0\3\13\1\31\1\36\1\13\1\32"+
    "\22\13\1\0\1\13\10\0\1\33\1\34\1\35\6\0"+
    "\1\13\1\155\1\13\1\31\2\13\1\32\22\13\1\0"+
    "\1\13\10\0\1\33\1\34\1\35\6\0\1\115\2\13"+
    "\1\31\2\13\1\32\22\13\1\0\1\13\10\0\1\33"+
    "\1\34\1\35\6\0\3\13\1\31\2\13\1\32\13\13"+
    "\1\156\6\13\1\0\1\13\10\0\1\33\1\34\1\35"+
    "\6\0\3\13\1\31\2\13\1\32\1\13\1\115\20\13"+
    "\1\0\1\13\10\0\1\33\1\34\1\35\6\0\3\63"+
    "\1\130\2\63\1\0\21\63\1\0\1\74\1\75\1\76"+
    "\1\77\1\100\1\157\1\132\13\0\1\160\3\13\1\161"+
    "\1\162\1\13\1\32\22\13\1\0\1\13\10\0\1\33"+
    "\1\34\1\35\6\0\3\63\1\130\2\63\1\0\12\63"+
    "\1\163\7\63\1\74\1\63\1\76\1\77\1\100\1\130"+
    "\1\132\14\0\3\63\1\130\2\63\1\0\1\164\21\63"+
    "\1\74\1\63\1\76\1\77\1\100\1\130\1\132\14\0"+
    "\3\63\1\130\2\63\1\0\6\63\1\165\13\63\1\74"+
    "\1\63\1\76\1\77\1\100\1\130\1\132\14\0\3\63"+
    "\1\130\2\63\1\0\1\166\21\63\1\74\1\63\1\76"+
    "\1\77\1\100\1\130\1\132\14\0\3\63\1\130\2\63"+
    "\1\0\1\63\1\167\20\63\1\74\1\63\1\76\1\77"+
    "\1\100\1\130\1\132\14\0\3\63\1\130\2\63\1\0"+
    "\1\170\21\63\1\74\1\63\1\76\1\77\1\100\1\130"+
    "\1\132\14\0\3\63\1\130\2\63\1\0\6\63\1\171"+
    "\13\63\1\74\1\63\1\76\1\77\1\100\1\130\1\132"+
    "\14\0\3\63\1\130\2\63\1\0\10\63\1\172\11\63"+
    "\1\74\1\63\1\76\1\77\1\100\1\130\1\132\14\0"+
    "\3\63\1\130\2\63\1\0\15\63\1\173\4\63\1\74"+
    "\1\63\1\76\1\77\1\100\1\130\1\132\45\0\1\75"+
    "\14\0\2\76\1\0\3\76\3\174\1\175\2\174\1\76"+
    "\21\174\1\76\1\176\2\145\1\177\1\200\1\175\1\201"+
    "\6\76\6\0\3\103\1\0\2\103\1\0\2\103\1\202"+
    "\17\103\1\0\1\103\62\0\1\203\15\0\1\151\2\0"+
    "\1\204\34\0\1\33\1\34\1\35\6\0\1\117\2\13"+
    "\1\31\2\13\1\32\22\13\1\0\1\13\10\0\1\33"+
    "\1\34\1\35\6\0\1\205\2\13\1\31\2\13\1\32"+
    "\22\13\1\0\1\13\10\0\1\33\1\34\1\35\6\0"+
    "\1\206\2\13\1\31\2\13\1\32\22\13\1\0\1\13"+
    "\10\0\1\33\1\34\1\35\6\0\1\13\1\124\1\13"+
    "\1\31\2\13\1\32\22\13\1\0\1\13\10\0\1\33"+
    "\1\34\1\35\11\0\1\130\47\0\1\160\3\0\1\161"+
    "\1\207\36\0\1\33\1\34\1\35\6\0\3\13\1\31"+
    "\1\13\1\210\1\32\22\13\1\0\1\13\10\0\1\33"+
    "\1\34\1\35\6\0\3\63\1\130\2\63\1\0\14\63"+
    "\1\165\5\63\1\74\1\63\1\76\1\77\1\100\1\130"+
    "\1\132\14\0\3\63\1\130\2\63\1\0\1\63\1\135"+
    "\20\63\1\74\1\63\1\76\1\77\1\100\1\130\1\132"+
    "\14\0\3\63\1\211\2\63\1\0\22\63\1\74\1\63"+
    "\1\76\1\77\1\100\1\130\1\132\14\0\3\63\1\130"+
    "\2\63\1\0\15\63\1\135\4\63\1\74\1\63\1\76"+
    "\1\77\1\100\1\130\1\132\14\0\3\63\1\130\1\133"+
    "\1\63\1\0\22\63\1\74\1\63\1\76\1\77\1\100"+
    "\1\130\1\132\14\0\1\63\1\212\1\63\1\130\2\63"+
    "\1\0\22\63\1\74\1\63\1\76\1\77\1\100\1\130"+
    "\1\132\14\0\1\165\2\63\1\130\2\63\1\0\22\63"+
    "\1\74\1\63\1\76\1\77\1\100\1\130\1\132\14\0"+
    "\3\63\1\130\2\63\1\0\13\63\1\213\6\63\1\74"+
    "\1\63\1\76\1\77\1\100\1\130\1\132\14\0\3\63"+
    "\1\130\2\63\1\0\1\63\1\165\20\63\1\74\1\63"+
    "\1\76\1\77\1\100\1\130\1\132\6\0\2\76\1\0"+
    "\3\76\3\174\1\175\2\174\1\76\22\174\1\176\1\174"+
    "\1\145\1\177\1\200\1\175\1\201\10\76\1\0\3\76"+
    "\3\174\1\175\2\174\1\76\21\174\1\76\1\176\2\145"+
    "\1\177\1\200\1\214\1\201\10\76\1\0\3\76\3\215"+
    "\1\76\2\215\1\76\21\215\2\76\1\215\1\145\14\76"+
    "\1\0\35\76\2\145\1\76\1\200\12\76\1\0\35\76"+
    "\2\145\12\76\6\0\3\103\1\216\2\103\1\0\22\103"+
    "\1\0\1\103\24\0\1\217\50\0\3\13\1\31\2\13"+
    "\1\32\7\13\1\220\12\13\1\0\1\13\10\0\1\33"+
    "\1\34\1\35\6\0\3\13\1\31\2\13\1\32\15\13"+
    "\1\221\4\13\1\0\1\13\10\0\1\33\1\34\1\35"+
    "\13\0\1\222\46\0\3\13\1\31\2\13\1\223\22\13"+
    "\1\0\1\13\10\0\1\33\1\34\1\35\6\0\3\224"+
    "\1\211\2\224\1\0\21\224\1\0\1\74\1\75\1\76"+
    "\1\77\1\100\1\157\1\132\14\0\1\225\2\63\1\130"+
    "\2\63\1\0\22\63\1\74\1\63\1\76\1\77\1\100"+
    "\1\130\1\132\14\0\1\63\1\171\1\63\1\130\2\63"+
    "\1\0\22\63\1\74\1\63\1\76\1\77\1\100\1\130"+
    "\1\132\6\0\2\76\1\0\6\76\1\175\27\76\1\145"+
    "\14\76\1\0\34\76\1\145\1\76\1\145\12\76\6\0"+
    "\3\103\1\216\2\103\1\0\21\103\24\0\3\226\1\217"+
    "\2\226\1\0\21\226\16\0\2\227\1\0\3\227\3\230"+
    "\1\231\2\230\1\232\22\230\1\227\1\230\10\227\1\233"+
    "\1\234\1\235\6\0\3\13\1\31\2\13\1\32\12\13"+
    "\1\115\7\13\1\0\1\13\10\0\1\33\1\34\1\35"+
    "\14\0\1\160\45\0\1\224\1\236\1\237\1\32\1\240"+
    "\1\241\1\0\4\224\1\242\6\224\1\243\2\224\1\244"+
    "\1\245\2\224\1\74\1\224\1\76\1\77\1\100\1\32"+
    "\1\102\14\0\3\63\1\130\2\63\1\0\15\63\1\246"+
    "\4\63\1\74\1\63\1\76\1\77\1\100\1\130\1\132"+
    "\14\0\3\226\1\247\2\226\1\0\22\226\1\0\1\226"+
    "\7\0\2\250\17\0\1\251\44\0\3\13\1\31\2\13"+
    "\1\32\1\252\21\13\1\0\1\13\10\0\1\33\1\34"+
    "\1\35\11\0\1\31\3\0\1\251\33\0\1\33\1\34"+
    "\1\35\6\0\1\63\1\64\1\65\1\32\1\66\1\67"+
    "\1\0\1\253\3\63\1\70\6\63\1\71\2\63\1\72"+
    "\1\73\1\63\1\0\1\74\1\75\1\76\1\77\1\100"+
    "\1\101\1\102\14\0\3\103\1\104\2\103\1\0\1\254"+
    "\11\103\1\105\6\103\1\0\1\106\1\22\1\55\1\107"+
    "\1\54\5\0\1\110\10\0\3\103\1\110\2\103\1\0"+
    "\1\254\20\103\1\0\1\106\1\22\1\55\1\107\1\54"+
    "\5\0\1\110\17\0\1\251\33\0\1\110\10\0\1\224"+
    "\1\236\1\237\1\32\1\240\1\241\1\0\1\255\3\224"+
    "\1\242\6\224\1\243\2\224\1\244\1\245\2\224\1\74"+
    "\1\224\1\76\1\77\1\100\1\32\1\102\14\0\1\224"+
    "\1\236\1\237\1\32\1\240\1\241\1\0\3\224\1\256"+
    "\1\242\6\224\1\243\2\224\1\244\1\245\2\224\1\74"+
    "\1\224\1\76\1\77\1\100\1\32\1\102\14\0\1\224"+
    "\1\236\1\237\1\32\1\240\1\241\1\0\4\224\1\242"+
    "\5\224\1\257\1\243\2\224\1\244\1\245\2\224\1\74"+
    "\1\224\1\76\1\77\1\100\1\32\1\102\14\0\1\224"+
    "\1\260\1\237\1\32\1\240\1\241\1\0\4\224\1\242"+
    "\6\224\1\243\2\224\1\244\1\245\2\224\1\74\1\224"+
    "\1\76\1\77\1\100\1\32\1\102\14\0\1\224\1\236"+
    "\1\237\1\32\1\240\1\241\1\0\4\224\1\242\1\224"+
    "\1\261\4\224\1\243\2\224\1\244\1\245\2\224\1\74"+
    "\1\224\1\76\1\77\1\100\1\32\1\102\14\0\1\224"+
    "\1\236\1\237\1\32\1\240\1\241\1\0\1\262\3\224"+
    "\1\242\1\263\5\224\1\243\2\224\1\244\1\245\2\224"+
    "\1\74\1\224\1\76\1\77\1\100\1\32\1\102\14\0"+
    "\1\224\1\236\1\237\1\32\1\240\1\241\1\0\1\264"+
    "\3\224\1\242\6\224\1\243\2\224\1\244\1\245\2\224"+
    "\1\74\1\224\1\76\1\77\1\100\1\32\1\102\14\0"+
    "\1\224\1\236\1\237\1\32\1\240\1\241\1\0\3\224"+
    "\1\265\1\242\6\224\1\243\2\224\1\244\1\245\2\224"+
    "\1\74\1\224\1\76\1\77\1\100\1\32\1\102\14\0"+
    "\3\63\1\130\2\63\1\0\12\63\1\165\7\63\1\74"+
    "\1\63\1\76\1\77\1\100\1\130\1\132\17\0\1\247"+
    "\36\0\2\250\27\0\1\266\34\0\3\13\1\31\2\13"+
    "\1\32\10\13\1\267\11\13\1\0\1\13\10\0\1\33"+
    "\1\34\1\35\6\0\3\63\1\130\2\63\1\0\10\63"+
    "\1\270\11\63\1\74\1\63\1\76\1\77\1\100\1\130"+
    "\1\132\14\0\3\103\1\0\2\103\1\0\10\103\1\271"+
    "\11\103\1\0\1\103\21\0\1\224\1\236\1\237\1\32"+
    "\1\240\1\241\1\0\4\224\1\242\5\224\1\272\1\243"+
    "\2\224\1\244\1\245\2\224\1\74\1\224\1\76\1\77"+
    "\1\100\1\32\1\102\14\0\1\224\1\236\1\237\1\32"+
    "\1\240\1\241\1\0\1\273\3\224\1\242\6\224\1\243"+
    "\2\224\1\244\1\245\2\224\1\74\1\224\1\76\1\77"+
    "\1\100\1\32\1\102\14\0\1\224\1\236\1\237\1\32"+
    "\1\240\1\241\1\0\4\224\1\242\1\224\1\274\4\224"+
    "\1\243\2\224\1\244\1\245\2\224\1\74\1\224\1\76"+
    "\1\77\1\100\1\32\1\102\14\0\1\224\1\236\1\237"+
    "\1\32\1\240\1\241\1\0\1\275\3\224\1\242\6\224"+
    "\1\243\2\224\1\244\1\245\2\224\1\74\1\224\1\76"+
    "\1\77\1\100\1\32\1\102\14\0\1\224\1\236\1\237"+
    "\1\32\1\240\1\241\1\0\1\224\1\276\2\224\1\242"+
    "\6\224\1\243\2\224\1\244\1\245\2\224\1\74\1\224"+
    "\1\76\1\77\1\100\1\32\1\102\14\0\1\224\1\236"+
    "\1\237\1\32\1\240\1\241\1\0\1\277\3\224\1\242"+
    "\6\224\1\243\2\224\1\244\1\245\2\224\1\74\1\224"+
    "\1\76\1\77\1\100\1\32\1\102\14\0\1\224\1\236"+
    "\1\237\1\32\1\240\1\241\1\0\4\224\1\242\1\224"+
    "\1\300\4\224\1\243\2\224\1\244\1\245\2\224\1\74"+
    "\1\224\1\76\1\77\1\100\1\32\1\102\14\0\1\224"+
    "\1\236\1\237\1\32\1\240\1\241\1\0\4\224\1\242"+
    "\3\224\1\301\2\224\1\243\2\224\1\244\1\245\2\224"+
    "\1\74\1\224\1\76\1\77\1\100\1\32\1\102\14\0"+
    "\1\224\1\236\1\237\1\32\1\240\1\241\1\0\4\224"+
    "\1\242\6\224\1\243\1\224\1\302\1\244\1\245\2\224"+
    "\1\74\1\224\1\76\1\77\1\100\1\32\1\102\31\0"+
    "\1\303\36\0\3\13\1\31\2\13\1\32\6\13\1\304"+
    "\13\13\1\0\1\13\10\0\1\33\1\34\1\35\6\0"+
    "\3\63\1\130\2\63\1\0\6\63\1\305\13\63\1\74"+
    "\1\63\1\76\1\77\1\100\1\130\1\132\14\0\3\103"+
    "\1\0\2\103\1\0\6\103\1\306\13\103\1\0\1\103"+
    "\21\0\1\224\1\236\1\237\1\32\1\240\1\241\1\0"+
    "\4\224\1\242\6\224\1\243\1\274\1\224\1\244\1\245"+
    "\2\224\1\74\1\224\1\76\1\77\1\100\1\32\1\102"+
    "\14\0\1\224\1\236\1\237\1\32\1\240\1\241\1\0"+
    "\1\224\1\257\2\224\1\242\6\224\1\243\2\224\1\244"+
    "\1\245\2\224\1\74\1\224\1\76\1\77\1\100\1\32"+
    "\1\102\14\0\1\224\1\236\1\237\1\307\1\240\1\241"+
    "\1\0\4\224\1\242\6\224\1\243\2\224\1\244\1\245"+
    "\2\224\1\74\1\224\1\76\1\77\1\100\1\32\1\102"+
    "\14\0\1\224\1\236\1\237\1\32\1\240\1\241\1\0"+
    "\4\224\1\242\5\224\1\272\1\243\1\224\1\257\1\244"+
    "\1\245\2\224\1\74\1\224\1\76\1\77\1\100\1\32"+
    "\1\102\14\0\1\224\1\236\1\237\1\32\1\310\1\241"+
    "\1\0\4\224\1\242\6\224\1\243\2\224\1\244\1\245"+
    "\2\224\1\74\1\224\1\76\1\77\1\100\1\32\1\102"+
    "\14\0\1\224\1\311\1\237\1\32\1\240\1\241\1\0"+
    "\4\224\1\242\6\224\1\243\2\224\1\244\1\245\2\224"+
    "\1\74\1\224\1\76\1\77\1\100\1\32\1\102\14\0"+
    "\1\274\1\236\1\237\1\32\1\240\1\241\1\0\4\224"+
    "\1\242\6\224\1\243\2\224\1\244\1\245\2\224\1\74"+
    "\1\224\1\76\1\77\1\100\1\32\1\102\14\0\1\224"+
    "\1\236\1\237\1\32\1\240\1\241\1\0\4\224\1\242"+
    "\6\224\1\312\2\224\1\244\1\245\2\224\1\74\1\224"+
    "\1\76\1\77\1\100\1\32\1\102\14\0\1\224\1\236"+
    "\1\237\1\32\1\240\1\241\1\0\1\224\1\274\2\224"+
    "\1\242\6\224\1\243\2\224\1\244\1\245\2\224\1\74"+
    "\1\224\1\76\1\77\1\100\1\32\1\102\6\0\2\313"+
    "\1\0\53\313\1\0\3\313\3\314\1\315\2\314\1\316"+
    "\22\314\1\313\1\314\10\313\1\317\1\320\1\321\2\313"+
    "\1\0\3\313\3\322\1\323\2\322\1\313\22\322\1\324"+
    "\1\322\1\325\1\326\1\327\1\323\1\330\10\313\1\0"+
    "\3\313\3\331\1\313\2\331\1\313\22\331\1\313\1\331"+
    "\13\313\6\0\1\224\1\236\1\237\1\307\1\240\1\241"+
    "\1\0\4\224\1\242\6\224\1\243\2\224\1\244\1\245"+
    "\1\224\1\0\1\74\1\75\1\76\1\77\1\100\1\101"+
    "\1\102\14\0\1\224\1\236\1\237\1\32\1\240\1\241"+
    "\1\0\4\224\1\242\5\224\1\332\1\243\2\224\1\244"+
    "\1\245\2\224\1\74\1\224\1\76\1\77\1\100\1\32"+
    "\1\102\14\0\1\333\1\236\1\237\1\32\1\240\1\241"+
    "\1\0\1\255\3\224\1\242\6\224\1\243\2\224\1\244"+
    "\1\245\2\224\1\74\1\224\1\76\1\77\1\100\1\32"+
    "\1\102\14\0\1\224\1\334\1\237\1\32\1\240\1\241"+
    "\1\0\1\262\3\224\1\242\1\263\5\224\1\243\2\224"+
    "\1\244\1\245\2\224\1\74\1\224\1\76\1\77\1\100"+
    "\1\32\1\102\34\0\1\335\33\0\3\13\1\31\2\13"+
    "\1\32\11\13\1\336\10\13\1\0\1\13\10\0\1\33"+
    "\1\34\1\35\11\0\1\31\14\0\1\335\22\0\1\33"+
    "\1\34\1\35\6\0\1\63\1\64\1\65\1\32\1\66"+
    "\1\67\1\0\4\63\1\70\4\63\1\337\1\63\1\71"+
    "\2\63\1\72\1\73\1\63\1\0\1\74\1\75\1\76"+
    "\1\77\1\100\1\101\1\102\14\0\3\103\1\104\2\103"+
    "\1\0\11\103\1\340\1\105\6\103\1\0\1\106\1\22"+
    "\1\55\1\107\1\54\5\0\1\110\10\0\3\103\1\110"+
    "\2\103\1\0\11\103\1\340\7\103\1\0\1\106\1\22"+
    "\1\55\1\107\1\54\5\0\1\110\30\0\1\335\22\0"+
    "\1\110\10\0\3\63\1\130\2\63\1\0\11\63\1\337"+
    "\10\63\1\74\1\63\1\76\1\77\1\100\1\130\1\132"+
    "\14\0\3\63\1\130\2\63\1\0\11\63\1\337\7\63"+
    "\1\0\1\74\1\75\1\76\1\77\1\100\1\157\1\132"+
    "\14\0\3\144\1\0\2\144\1\0\11\144\1\341\7\144"+
    "\2\0\1\144\13\0\2\76\1\0\23\76\1\342\12\76"+
    "\1\145\12\76\26\0\1\335\11\0\1\75\2\0\1\100"+
    "\36\0\1\335\11\0\1\75\21\0\3\103\1\0\2\103"+
    "\1\0\11\103\1\340\10\103\1\0\1\103\21\0\1\224"+
    "\1\236\1\237\1\32\1\240\1\241\1\0\4\224\1\242"+
    "\1\224\1\274\4\224\1\243\1\274\1\224\1\244\1\245"+
    "\2\224\1\74\1\224\1\76\1\77\1\100\1\32\1\102"+
    "\14\0\1\224\1\236\1\237\1\32\1\240\1\241\1\0"+
    "\4\224\1\242\6\224\1\243\1\224\1\343\1\244\1\245"+
    "\2\224\1\74\1\224\1\76\1\77\1\100\1\32\1\102"+
    "\14\0\1\274\1\236\1\237\1\32\1\240\1\241\1\0"+
    "\1\255\3\224\1\242\6\224\1\243\2\224\1\244\1\245"+
    "\2\224\1\74\1\224\1\76\1\77\1\100\1\32\1\102"+
    "\24\0\1\344\43\0\3\13\1\31\2\13\1\32\1\13"+
    "\1\345\20\13\1\0\1\13\10\0\1\33\1\34\1\35"+
    "\6\0\3\63\1\130\2\63\1\0\1\63\1\346\20\63"+
    "\1\74\1\63\1\76\1\77\1\100\1\130\1\132\14\0"+
    "\3\103\1\0\2\103\1\0\1\103\1\347\20\103\1\0"+
    "\1\103\31\0\1\344\20\0\1\75\14\0\2\76\1\0"+
    "\13\76\1\350\22\76\1\145\12\76\6\0\1\224\1\236"+
    "\1\237\1\32\1\240\1\241\1\0\4\224\1\242\5\224"+
    "\1\274\1\243\2\224\1\244\1\245\2\224\1\74\1\224"+
    "\1\76\1\77\1\100\1\32\1\102\20\0\1\351\47\0"+
    "\3\13\1\31\1\352\1\13\1\32\22\13\1\0\1\13"+
    "\10\0\1\33\1\34\1\35\6\0\3\63\1\130\1\353"+
    "\1\63\1\0\22\63\1\74\1\63\1\76\1\77\1\100"+
    "\1\130\1\132\14\0\3\103\1\0\1\354\1\103\1\0"+
    "\22\103\1\0\1\103\13\0\2\76\1\0\7\76\1\355"+
    "\26\76\1\145\12\76\27\0\1\356\32\0\3\13\1\31"+
    "\2\13\1\32\12\13\1\357\7\13\1\0\1\13\10\0"+
    "\1\33\1\34\1\35\6\0\3\63\1\130\2\63\1\0"+
    "\12\63\1\360\7\63\1\74\1\63\1\76\1\77\1\100"+
    "\1\130\1\132\14\0\3\103\1\0\2\103\1\0\12\103"+
    "\1\361\7\103\1\0\1\103\13\0\2\76\1\0\24\76"+
    "\1\362\11\76\1\145\12\76\23\0\1\363\36\0\3\13"+
    "\1\31\2\13\1\32\6\13\1\364\13\13\1\0\1\13"+
    "\10\0\1\33\1\34\1\35\6\0\3\63\1\130\2\63"+
    "\1\0\6\63\1\365\13\63\1\74\1\63\1\76\1\77"+
    "\1\100\1\130\1\132\14\0\3\103\1\0\2\103\1\0"+
    "\6\103\1\366\13\103\1\0\1\103\13\0\2\76\1\0"+
    "\20\76\1\367\15\76\1\145\12\76\7\0\1\370\4\0"+
    "\1\371\45\0\1\13\1\372\1\13\1\31\2\13\1\373"+
    "\22\13\1\0\1\13\10\0\1\33\1\34\1\35\6\0"+
    "\1\63\1\374\1\63\1\130\2\63\1\371\22\63\1\74"+
    "\1\63\1\76\1\77\1\100\1\130\1\132\14\0\1\103"+
    "\1\375\1\103\1\0\2\103\1\371\22\103\1\0\1\103"+
    "\13\0\2\76\1\0\4\76\1\376\4\76\1\377\24\76"+
    "\1\145\12\76\27\0\1\u0100\32\0\3\13\1\31\2\13"+
    "\1\32\12\13\1\u0101\7\13\1\0\1\13\10\0\1\33"+
    "\1\34\1\35\6\0\3\63\1\130\2\63\1\0\12\63"+
    "\1\u0102\7\63\1\74\1\63\1\76\1\77\1\100\1\130"+
    "\1\132\14\0\3\103\1\0\2\103\1\0\12\103\1\u0103"+
    "\7\103\1\0\1\103\13\0\2\76\1\0\24\76\1\u0104"+
    "\11\76\1\145\12\76\14\0\1\371\45\0\3\13\1\31"+
    "\2\13\1\373\22\13\1\0\1\13\10\0\1\33\1\34"+
    "\1\35\6\0\3\63\1\130\2\63\1\371\22\63\1\74"+
    "\1\63\1\76\1\77\1\100\1\130\1\132\14\0\3\103"+
    "\1\0\2\103\1\371\22\103\1\0\1\103\13\0\2\76"+
    "\1\0\11\76\1\377\24\76\1\145\12\76";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10472];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\21\1\1\0\1\1\5\0"+
    "\15\1\3\0\1\1\1\0\1\1\1\0\1\1\17\0"+
    "\1\11\1\1\1\0\1\1\3\0\2\1\1\0\13\1"+
    "\1\11\1\0\1\1\1\11\13\0\1\1\1\11\2\0"+
    "\5\1\1\0\1\11\1\0\1\1\16\0\2\1\1\0"+
    "\1\11\2\1\1\0\1\1\7\0\2\1\1\0\1\1"+
    "\4\0\1\1\17\0\1\11\1\0\1\1\1\0\1\1"+
    "\12\0\1\1\1\0\1\1\12\0\1\1\1\0\1\1"+
    "\5\0\1\1\13\0\2\1\4\0\1\1\1\0\1\1"+
    "\4\0\1\1\1\0\1\1\2\0\1\1\1\0\1\1"+
    "\2\0\1\1\1\0\1\1\2\0\1\1\1\0\1\1"+
    "\2\0\1\11\2\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[260];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
Frecuencias f;
static class Frecuencias {
	public enum TipoComponente {
    	IDENTIFICADOR("Identificadores"),
    	LISTA_PARAM("Listas Parámetros"),
    	LLAMADO_METODO("Llamados a métodos"),
    	BLOQUE("Bloques"),
    	TIPO("Tipos"),
    	IF("Condicionales if"),
    	ELSE("Condicionales else"),
    	CICLO("Ciclos"),
    	ARREGLO("Arreglos"),
    	IMPRESION("Impresiones"),
    	INSTRUCCION ("Instrucciones");

    	private final String nombre;       
	    private TipoComponente(String s) {
	        nombre = s;
	    }
	    public boolean equalsName(String n){
	        return (n == null)? false:nombre.equals(n);
	    }
	    public String toString(){
	       return nombre;
	    }
	}
 	
	EnumMap<TipoComponente, Integer> listaFrecuencias;

    Frecuencias() {
        listaFrecuencias = new EnumMap<TipoComponente, Integer>(TipoComponente.class);
        for (TipoComponente tc : TipoComponente.values()) {
            listaFrecuencias.put(tc, 0);
        }
    }

    public void contarComponente(TipoComponente tc){
    	Object valor = listaFrecuencias.get(tc);
		int v = (Integer)valor;
		listaFrecuencias.put(tc, v+1);
	}

	public void guardarTabla() throws IOException {
		String nombreArchivo = "tablas/tabla.txt"; //usar un timestap aqui
		BufferedWriter out = new BufferedWriter(new FileWriter(nombreArchivo));

		Set<TipoComponente> keySet = listaFrecuencias.keySet();
        String primeraLinea = "", detalles ="";
        for (TipoComponente tc : keySet) {
            int v = listaFrecuencias.get(tc);
            primeraLinea += String.valueOf(v) + " ";
            detalles += tc.toString()+": "+String.valueOf(v)+"\n";
        }
        out.write(primeraLinea.trim()+"\n"+detalles);
        out.close();
	}
}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  AnalizadorL(java.io.Reader in) {
  f = new Frecuencias();
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  AnalizadorL(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 134) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { f.contarComponente(Frecuencias.TipoComponente.INSTRUCCION);
          }
        case 13: break;
        case 7: 
          { f.contarComponente(Frecuencias.TipoComponente.TIPO);
          }
        case 14: break;
        case 8: 
          { f.contarComponente(Frecuencias.TipoComponente.LLAMADO_METODO);
          }
        case 15: break;
        case 10: 
          { f.contarComponente(Frecuencias.TipoComponente.ELSE);
          }
        case 16: break;
        case 9: 
          { f.contarComponente(Frecuencias.TipoComponente.CICLO);
          }
        case 17: break;
        case 12: 
          { f.contarComponente(Frecuencias.TipoComponente.IMPRESION);
          }
        case 18: break;
        case 6: 
          { f.contarComponente(Frecuencias.TipoComponente.IF);
          }
        case 19: break;
        case 11: 
          { f.contarComponente(Frecuencias.TipoComponente.ARREGLO);
          }
        case 20: break;
        case 5: 
          { f.contarComponente(Frecuencias.TipoComponente.LISTA_PARAM);
          }
        case 21: break;
        case 1: 
          { 
          }
        case 22: break;
        case 3: 
          { f.contarComponente(Frecuencias.TipoComponente.IDENTIFICADOR);
          }
        case 23: break;
        case 2: 
          { f.contarComponente(Frecuencias.TipoComponente.BLOQUE);
          }
        case 24: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                f.guardarTabla();System.exit(0);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java AnalizadorL <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        AnalizadorL scanner = null;
        try {
          scanner = new AnalizadorL( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
