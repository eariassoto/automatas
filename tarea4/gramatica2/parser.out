Created by PLY version 3.6 (http://www.dabeaz.com/ply)

Unused terminals:

    NAME

Grammar

Rule 0     S' -> statement
Rule 1     statement -> expression
Rule 2     expression -> cod1 R NUMBER , [ NUMBER ]
Rule 3     cod1 -> LOAD
Rule 4     cod1 -> STORE
Rule 5     expression -> cod2 R NUMBER , NUMBER
Rule 6     cod2 -> LOADI
Rule 7     cod2 -> SHIFT
Rule 8     expression -> STOREI R NUMBER , [ NUMBER ]
Rule 9     expression -> STOREI R NUMBER , NUMBER
Rule 10    expression -> cod4 NUMBER
Rule 11    cod4 -> JMP
Rule 12    cod4 -> BB
Rule 13    cod4 -> BEQ
Rule 14    expression -> CMP R NUMBER , R NUMBER
Rule 15    expression -> NOT R NUMBER , R NUMBER
Rule 16    expression -> cod5 R NUMBER , R NUMBER , R NUMBER
Rule 17    cod5 -> AND
Rule 18    cod5 -> OR
Rule 19    cod5 -> XOR
Rule 20    cod5 -> ADD
Rule 21    cod5 -> SUB

Terminals, with rules where they appear

,                    : 2 5 8 9 14 15 16 16
ADD                  : 20
AND                  : 17
BB                   : 12
BEQ                  : 13
CMP                  : 14
JMP                  : 11
LOAD                 : 3
LOADI                : 6
NAME                 : 
NOT                  : 15
NUMBER               : 2 2 5 5 8 8 9 9 10 14 14 15 15 16 16 16
OR                   : 18
R                    : 2 5 8 9 14 14 15 15 16 16 16
SHIFT                : 7
STORE                : 4
STOREI               : 8 9
SUB                  : 21
XOR                  : 19
[                    : 2 8
]                    : 2 8
error                : 

Nonterminals, with rules where they appear

cod1                 : 2
cod2                 : 5
cod4                 : 10
cod5                 : 16
expression           : 1
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . expression
    (2) expression -> . cod1 R NUMBER , [ NUMBER ]
    (5) expression -> . cod2 R NUMBER , NUMBER
    (8) expression -> . STOREI R NUMBER , [ NUMBER ]
    (9) expression -> . STOREI R NUMBER , NUMBER
    (10) expression -> . cod4 NUMBER
    (14) expression -> . CMP R NUMBER , R NUMBER
    (15) expression -> . NOT R NUMBER , R NUMBER
    (16) expression -> . cod5 R NUMBER , R NUMBER , R NUMBER
    (3) cod1 -> . LOAD
    (4) cod1 -> . STORE
    (6) cod2 -> . LOADI
    (7) cod2 -> . SHIFT
    (11) cod4 -> . JMP
    (12) cod4 -> . BB
    (13) cod4 -> . BEQ
    (17) cod5 -> . AND
    (18) cod5 -> . OR
    (19) cod5 -> . XOR
    (20) cod5 -> . ADD
    (21) cod5 -> . SUB

    STOREI          shift and go to state 6
    CMP             shift and go to state 7
    NOT             shift and go to state 19
    LOAD            shift and go to state 10
    STORE           shift and go to state 16
    LOADI           shift and go to state 1
    SHIFT           shift and go to state 4
    JMP             shift and go to state 8
    BB              shift and go to state 3
    BEQ             shift and go to state 5
    AND             shift and go to state 17
    OR              shift and go to state 21
    XOR             shift and go to state 11
    ADD             shift and go to state 18
    SUB             shift and go to state 2

    cod4                           shift and go to state 12
    cod5                           shift and go to state 13
    cod2                           shift and go to state 14
    statement                      shift and go to state 9
    cod1                           shift and go to state 15
    expression                     shift and go to state 20

state 1

    (6) cod2 -> LOADI .

    R               reduce using rule 6 (cod2 -> LOADI .)


state 2

    (21) cod5 -> SUB .

    R               reduce using rule 21 (cod5 -> SUB .)


state 3

    (12) cod4 -> BB .

    NUMBER          reduce using rule 12 (cod4 -> BB .)


state 4

    (7) cod2 -> SHIFT .

    R               reduce using rule 7 (cod2 -> SHIFT .)


state 5

    (13) cod4 -> BEQ .

    NUMBER          reduce using rule 13 (cod4 -> BEQ .)


state 6

    (8) expression -> STOREI . R NUMBER , [ NUMBER ]
    (9) expression -> STOREI . R NUMBER , NUMBER

    R               shift and go to state 22


state 7

    (14) expression -> CMP . R NUMBER , R NUMBER

    R               shift and go to state 23


state 8

    (11) cod4 -> JMP .

    NUMBER          reduce using rule 11 (cod4 -> JMP .)


state 9

    (0) S' -> statement .



state 10

    (3) cod1 -> LOAD .

    R               reduce using rule 3 (cod1 -> LOAD .)


state 11

    (19) cod5 -> XOR .

    R               reduce using rule 19 (cod5 -> XOR .)


state 12

    (10) expression -> cod4 . NUMBER

    NUMBER          shift and go to state 24


state 13

    (16) expression -> cod5 . R NUMBER , R NUMBER , R NUMBER

    R               shift and go to state 25


state 14

    (5) expression -> cod2 . R NUMBER , NUMBER

    R               shift and go to state 26


state 15

    (2) expression -> cod1 . R NUMBER , [ NUMBER ]

    R               shift and go to state 27


state 16

    (4) cod1 -> STORE .

    R               reduce using rule 4 (cod1 -> STORE .)


state 17

    (17) cod5 -> AND .

    R               reduce using rule 17 (cod5 -> AND .)


state 18

    (20) cod5 -> ADD .

    R               reduce using rule 20 (cod5 -> ADD .)


state 19

    (15) expression -> NOT . R NUMBER , R NUMBER

    R               shift and go to state 28


state 20

    (1) statement -> expression .

    $end            reduce using rule 1 (statement -> expression .)


state 21

    (18) cod5 -> OR .

    R               reduce using rule 18 (cod5 -> OR .)


state 22

    (8) expression -> STOREI R . NUMBER , [ NUMBER ]
    (9) expression -> STOREI R . NUMBER , NUMBER

    NUMBER          shift and go to state 29


state 23

    (14) expression -> CMP R . NUMBER , R NUMBER

    NUMBER          shift and go to state 30


state 24

    (10) expression -> cod4 NUMBER .

    $end            reduce using rule 10 (expression -> cod4 NUMBER .)


state 25

    (16) expression -> cod5 R . NUMBER , R NUMBER , R NUMBER

    NUMBER          shift and go to state 31


state 26

    (5) expression -> cod2 R . NUMBER , NUMBER

    NUMBER          shift and go to state 32


state 27

    (2) expression -> cod1 R . NUMBER , [ NUMBER ]

    NUMBER          shift and go to state 33


state 28

    (15) expression -> NOT R . NUMBER , R NUMBER

    NUMBER          shift and go to state 34


state 29

    (8) expression -> STOREI R NUMBER . , [ NUMBER ]
    (9) expression -> STOREI R NUMBER . , NUMBER

    ,               shift and go to state 35


state 30

    (14) expression -> CMP R NUMBER . , R NUMBER

    ,               shift and go to state 36


state 31

    (16) expression -> cod5 R NUMBER . , R NUMBER , R NUMBER

    ,               shift and go to state 37


state 32

    (5) expression -> cod2 R NUMBER . , NUMBER

    ,               shift and go to state 38


state 33

    (2) expression -> cod1 R NUMBER . , [ NUMBER ]

    ,               shift and go to state 39


state 34

    (15) expression -> NOT R NUMBER . , R NUMBER

    ,               shift and go to state 40


state 35

    (8) expression -> STOREI R NUMBER , . [ NUMBER ]
    (9) expression -> STOREI R NUMBER , . NUMBER

    [               shift and go to state 42
    NUMBER          shift and go to state 41


state 36

    (14) expression -> CMP R NUMBER , . R NUMBER

    R               shift and go to state 43


state 37

    (16) expression -> cod5 R NUMBER , . R NUMBER , R NUMBER

    R               shift and go to state 44


state 38

    (5) expression -> cod2 R NUMBER , . NUMBER

    NUMBER          shift and go to state 45


state 39

    (2) expression -> cod1 R NUMBER , . [ NUMBER ]

    [               shift and go to state 46


state 40

    (15) expression -> NOT R NUMBER , . R NUMBER

    R               shift and go to state 47


state 41

    (9) expression -> STOREI R NUMBER , NUMBER .

    $end            reduce using rule 9 (expression -> STOREI R NUMBER , NUMBER .)


state 42

    (8) expression -> STOREI R NUMBER , [ . NUMBER ]

    NUMBER          shift and go to state 48


state 43

    (14) expression -> CMP R NUMBER , R . NUMBER

    NUMBER          shift and go to state 49


state 44

    (16) expression -> cod5 R NUMBER , R . NUMBER , R NUMBER

    NUMBER          shift and go to state 50


state 45

    (5) expression -> cod2 R NUMBER , NUMBER .

    $end            reduce using rule 5 (expression -> cod2 R NUMBER , NUMBER .)


state 46

    (2) expression -> cod1 R NUMBER , [ . NUMBER ]

    NUMBER          shift and go to state 51


state 47

    (15) expression -> NOT R NUMBER , R . NUMBER

    NUMBER          shift and go to state 52


state 48

    (8) expression -> STOREI R NUMBER , [ NUMBER . ]

    ]               shift and go to state 53


state 49

    (14) expression -> CMP R NUMBER , R NUMBER .

    $end            reduce using rule 14 (expression -> CMP R NUMBER , R NUMBER .)


state 50

    (16) expression -> cod5 R NUMBER , R NUMBER . , R NUMBER

    ,               shift and go to state 54


state 51

    (2) expression -> cod1 R NUMBER , [ NUMBER . ]

    ]               shift and go to state 55


state 52

    (15) expression -> NOT R NUMBER , R NUMBER .

    $end            reduce using rule 15 (expression -> NOT R NUMBER , R NUMBER .)


state 53

    (8) expression -> STOREI R NUMBER , [ NUMBER ] .

    $end            reduce using rule 8 (expression -> STOREI R NUMBER , [ NUMBER ] .)


state 54

    (16) expression -> cod5 R NUMBER , R NUMBER , . R NUMBER

    R               shift and go to state 56


state 55

    (2) expression -> cod1 R NUMBER , [ NUMBER ] .

    $end            reduce using rule 2 (expression -> cod1 R NUMBER , [ NUMBER ] .)


state 56

    (16) expression -> cod5 R NUMBER , R NUMBER , R . NUMBER

    NUMBER          shift and go to state 57


state 57

    (16) expression -> cod5 R NUMBER , R NUMBER , R NUMBER .

    $end            reduce using rule 16 (expression -> cod5 R NUMBER , R NUMBER , R NUMBER .)

